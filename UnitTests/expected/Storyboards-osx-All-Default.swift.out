// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

import Foundation
import Cocoa

protocol StoryboardSceneType {
  static var storyboardName: String { get }
}

extension StoryboardSceneType {
  static func storyboard() -> NSStoryboard {
    return NSStoryboard(name: self.storyboardName, bundle: nil)
  }

  static func initialController() -> AnyObject {
    return storyboard().instantiateInitialController()!
  }
}

extension StoryboardSceneType where Self: RawRepresentable, Self.RawValue == String {
  func controller() -> AnyObject {
    return Self.storyboard().instantiateControllerWithIdentifier(self.rawValue)
  }
  static func controller(identifier: Self) -> AnyObject {
    return identifier.controller()
  }
}

protocol StoryboardSegueType: RawRepresentable { }

extension NSWindowController {
  func performSegue<S: StoryboardSegueType where S.RawValue == String>(segue: S, sender: AnyObject? = nil) {
    performSegueWithIdentifier(segue.rawValue, sender: sender)
  }
}

extension NSViewController {
  func performSegue<S: StoryboardSegueType where S.RawValue == String>(segue: S, sender: AnyObject? = nil) {
    performSegueWithIdentifier(segue.rawValue, sender: sender)
  }
}

struct StoryboardScene {
  enum Anonymous_Osx: StoryboardSceneType {
    static let storyboardName = "Anonymous-osx"
  }
  enum Dependency_Osx: String, StoryboardSceneType {
    static let storyboardName = "Dependency-osx"

    case DependentScene = "Dependent"
    static func instantiateDependent() -> NSViewController {
      guard let vc = StoryboardScene.Dependency_Osx.DependentScene.controller() as? NSViewController
      else {
        fatalError("ViewController 'Dependent' is not of the expected class NSViewController.")
      }
      return vc
    }
  }
  enum Message_Osx: String, StoryboardSceneType {
    static let storyboardName = "Message-osx"

    case MessageDetailsScene = "MessageDetails"
    static func instantiateMessageDetails() -> NSViewController {
      guard let vc = StoryboardScene.Message_Osx.MessageDetailsScene.controller() as? NSViewController
      else {
        fatalError("ViewController 'MessageDetails' is not of the expected class NSViewController.")
      }
      return vc
    }

    case MessageListScene = "MessageList"
    static func instantiateMessageList() -> NSViewController {
      guard let vc = StoryboardScene.Message_Osx.MessageListScene.controller() as? NSViewController
      else {
        fatalError("ViewController 'MessageList' is not of the expected class NSViewController.")
      }
      return vc
    }

    case MessageListFooterScene = "MessageListFooter"
    static func instantiateMessageListFooter() -> NSViewController {
      guard let vc = StoryboardScene.Message_Osx.MessageListFooterScene.controller() as? NSViewController
      else {
        fatalError("ViewController 'MessageListFooter' is not of the expected class NSViewController.")
      }
      return vc
    }

    case MessagesTabScene = "MessagesTab"
    static func instantiateMessagesTab() -> CustomTabViewController {
      guard let vc = StoryboardScene.Message_Osx.MessagesTabScene.controller() as? CustomTabViewController
      else {
        fatalError("ViewController 'MessagesTab' is not of the expected class CustomTabViewController.")
      }
      return vc
    }

    case SplitMessagesScene = "SplitMessages"
    static func instantiateSplitMessages() -> NSSplitViewController {
      guard let vc = StoryboardScene.Message_Osx.SplitMessagesScene.controller() as? NSSplitViewController
      else {
        fatalError("ViewController 'SplitMessages' is not of the expected class NSSplitViewController.")
      }
      return vc
    }

    case WindowCtrlScene = "WindowCtrl"
    static func instantiateWindowCtrl() -> NSWindowController {
      guard let vc = StoryboardScene.Message_Osx.WindowCtrlScene.controller() as? NSWindowController
      else {
        fatalError("ViewController 'WindowCtrl' is not of the expected class NSWindowController.")
      }
      return vc
    }
  }
  enum Placeholder_Osx: String, StoryboardSceneType {
    static let storyboardName = "Placeholder-osx"

    case DependentScene = "Dependent"
    static func instantiateDependent() -> NSControllerPlaceholder {
      guard let vc = StoryboardScene.Placeholder_Osx.DependentScene.controller() as? NSControllerPlaceholder
      else {
        fatalError("ViewController 'Dependent' is not of the expected class NSControllerPlaceholder.")
      }
      return vc
    }

    case WindowScene = "Window"
    static func instantiateWindow() -> NSWindowController {
      guard let vc = StoryboardScene.Placeholder_Osx.WindowScene.controller() as? NSWindowController
      else {
        fatalError("ViewController 'Window' is not of the expected class NSWindowController.")
      }
      return vc
    }
  }
}

struct StoryboardSegue {
  enum Message_Osx: String, StoryboardSegueType {
    case Custom = "Custom"
    case Embed = "Embed"
    case Modal = "Modal"
    case Popover = "Popover"
    case Sheet = "Sheet"
    case Show = "Show"
  }
}
